{
  "swagger": "2.0",
  "info": {
    "version": "2019-05-01",
    "title": "ProvisioningServiceClient",
    "description": "API for service operations with the Azure IoT Hub Device Provisioning Service"
  },
  "host": "your-dps.azure-devices-provisioning.net",
  "schemes": [
    "https"
  ],
  "paths": {
    "/certificateAuthorities/{name}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a certificate authority. This operation requires the certificateAuthority/read permission.",
        "operationId": "GetCertificateAuthority",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The certificate authority name. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateAuthority"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace a certificate authority with the specified certificate authority source type. This operation requires the certificateAuthority/write permission.",
        "operationId": "CreateOrReplaceCertificateAuthority",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The desired certificate authority name. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateAuthority",
            "in": "body",
            "description": "The created certificate authority object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthority"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the certificate authority.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateAuthority"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the certificate authority. This operation requires the certificateAuthority/delete permission.",
        "operationId": "DeleteCertificateAuthority",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The certificate authority name. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the certificate authority.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{name}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a device group. This operation requires the deviceGroup/read permission.",
        "operationId": "GetDeviceGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace the device group. This operation requires the deviceGroup/write permission.",
        "operationId": "CreateOrReplaceDeviceGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceGroup",
            "in": "body",
            "description": "The device group.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the device group.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the device group. This operation requires the deviceGroups/delete permission.",
        "operationId": "DeleteDeviceGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the device group.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/deviceRecords/{deviceId}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a device authentication record. This operation requires the deviceGroup/read or deviceGroup/write permission.",
        "operationId": "GetDeviceRecord",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Properties to optionally expand in response.",
            "required": false,
            "type": "string",
            "enum": [
              "symmetricKey",
              "x509Certificate",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceRecord"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace the device authentication record. This operation requires the deviceGroup/write permission.",
        "operationId": "CreateOrReplaceDeviceRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceRecord",
            "in": "body",
            "description": "The device Record.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceRecord"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the device Record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceRecord"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the device record. This operation requires the deviceGroups/delete permission.",
        "operationId": "DeleteDeviceRecord",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the device record.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/groupRecords/{name}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a group authentication record. This operation requires the deviceGroup/read or deviceGroup/write permission.",
        "operationId": "GetGroupRecord",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the group record. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Properties to optionally expand in response. If not specified the service will not expand the optional properties.",
            "required": false,
            "type": "string",
            "enum": [
              "symmetricKey",
              "x509Certificate",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupRecord"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace the group authentication record. This operation requires the deviceGroup/write permission.",
        "operationId": "CreateOrReplaceGroupRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the group record. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupRecord",
            "in": "body",
            "description": "The group record.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupRecord"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the group record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupRecord"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the group record. This operation requires the deviceGroups/delete permission.",
        "operationId": "DeleteGroupRecord",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of group record. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the group record.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/linkedHubs/{name}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a linked hub. This operation requires the linkedHubs/read permission.",
        "operationId": "GetLinkedHub",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the linked hub. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LinkedHub"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace the linked hub. This operation requires the linkedHubs/write permission.",
        "operationId": "CreateOrReplaceLinkedHub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the linked hub. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end..",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedHub",
            "in": "body",
            "description": "The linked hub.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkedHub"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the linked hub.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LinkedHub"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the linked hub record.",
        "operationId": "DeleteLinkedHub",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the linked hub. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the linked hub record.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/provisioningSettings/{name}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a provisioning settings. This operation requires the provisioningSettings/read or provisioningSettings/write permissions.",
        "operationId": "GetProvisioningSettings",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the provisioning settings. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningSettings"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or replace the provisioning settings. This operation requires the provisioningSettings/write permission.",
        "operationId": "CreateOrReplaceProvisioningSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the provisioning settings. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end..",
            "required": true,
            "type": "string"
          },
          {
            "name": "provisioningSettings",
            "in": "body",
            "description": "The provisioning settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProvisioningSettings"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the provisioning settings.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningSettings"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete the provisioning settings. This operation requires the provisioningSettings/delete permission.",
        "operationId": "DeleteProvisioningSettings",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the provisioning settings. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the provisioning settings.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/provisioningRecords/{deviceId}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a device provisioning record. This operation requires the deviceGroup/read permission.",
        "operationId": "GetProvisioningRecord",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "Name of device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningRecord"
            },
            "headers": {
              "ETag": {
                "description": "The ETag of the resource to update.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/certificateAuthorities/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the certificate authorities and a continuation token to retrieve the next page. This operation requires the dps/read permission.",
        "operationId": "QueryCertificateAuthorities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the certificate authorities or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the device groups and a continuation token to retrieve the next page. This operation requires the deviceGroup/read permission.",
        "operationId": "QueryDeviceGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the device groups or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceGroupQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/deviceRecords/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the device record in the specified device group and a continuation token to retrieve the next page. This operation requires the deviceGroup/read or deviceGroup/write permission.",
        "operationId": "QueryDeviceRecords",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "The device group in which the query operation is performed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the device records or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Properties to optionally expand in the response. If not specified the service will not expand the optional properties.",
            "required": false,
            "type": "string",
            "enum": [
              "symmetricKey",
              "x509Certificate",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceRecordQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/groupRecords/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the group record in the specified device group and a continuation token to retrieve the next page. This operation requires the deviceGroup/read or deviceGroup/write permission.",
        "operationId": "QueryGroupRecords",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "The device group in which the query operation is performed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the group records or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Properties to optionally expand in the response. If not specified the service will not expand the optional properties.",
            "required": false,
            "type": "string",
            "enum": [
              "symmetricKey",
              "x509Certificate",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupRecordQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/linkedHubs/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the linked IoTHubs and a continuation token to retrieve the next page. This operation requires the linkedHubs/read permission.",
        "operationId": "QueryLinkedHubs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the linked IoTHubs or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LinkedHubQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/deviceGroups/{deviceGroupName}/provisioningRecords/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the provisioning records and a continuation token to retrieve the next page. This operation requires the deviceGroup/read permission.",
        "operationId": "QueryProvisioningRecords",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceGroupName",
            "in": "path",
            "description": "The device group in which the query operation is performed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the provisioning records or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningRecordQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/provisioningSettings/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Retrieves a list of the provisioning settings and a continuation token to retrieve the next page. This operation requires the provisioningSettings/read permission.",
        "operationId": "QueryProvisioningSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "Maximum number of results to return in a page. If not specified with {QueryAll} the service will return up to 100 results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "The {QueryAll} to match the provisioning settings or {QueryNext} returned in response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Query"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningSettingsQueryResponse"
            },
            "headers": {
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ProvisioningServiceErrorDetails": {
      "description": "Contains the properties of an error returned by the Azure IoT Hub Provisioning Service.",
      "type": "object",
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "trackingId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timestampUtc": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CertificateAuthority": {
      "required": [
        "certificateAuthorityType"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The certificate authority identifier. A Case-insensitive string (up to 64 characters long) of ASCII 7-bit alphanumeric\r\ncharacters plus certain special characters . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the device record.",
          "type": "string",
          "readOnly": true
        },
        "certificateAuthorityType": {
          "type": "string"
        }
      },
      "discriminator": "certificateAuthorityType"
    },
    "DeviceGroup": {
      "required": [
        "provisioningSettingsName"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the device group. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "provisioningSettingsName": {
          "description": "The Name of the provisioning settings to apply to this device group.",
          "type": "string"
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the device group.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DeviceRecord": {
      "required": [
        "authenticationMechanisms"
      ],
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Name of the individual device. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "isEdge": {
          "description": "If set to {True} will provision the device as edge device.",
          "default": false,
          "type": "boolean"
        },
        "status": {
          "description": "The status for this device. Setting to {DeviceStatus.Disabled} will block provisioning the device with this authentication.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "authenticationMechanisms": {
          "description": "Authentication mechanism used by the device to provision.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceAuthenticationMechanism"
          }
        },
        "deviceGroupName": {
          "description": "Name of the device group of which this device is a member.",
          "type": "string",
          "readOnly": true
        },
        "desiredHubDeviceId": {
          "description": "Device Id to be used in IoT Hub during device provisioning.",
          "type": "string",
          "readOnly": true
        },
        "groupRecordName": {
          "description": "If set, this device record is auto-created from the corresponding group record.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the device record.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DeviceAuthenticationMechanism": {
      "required": [
        "deviceAuthenticationType"
      ],
      "type": "object",
      "properties": {
        "deviceAuthenticationType": {
          "type": "string"
        }
      },
      "discriminator": "deviceAuthenticationType"
    },
    "GroupRecord": {
      "required": [
        "authenticationMechanisms"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the group record. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "isEdge": {
          "description": "If set to {True} will provision the devices from this group as edge devices.",
          "default": false,
          "type": "boolean"
        },
        "status": {
          "description": "The status for this group. Setting to {DeviceStatus.Disabled} will block provisioning for devices with this group authentication.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "authenticationMechanisms": {
          "description": "The authentication mechanism used by this group of devices to provision.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupAuthenticationMechanism"
          }
        },
        "deviceGroupName": {
          "description": "Name of the device group of which this device is a member.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the group record.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "GroupAuthenticationMechanism": {
      "required": [
        "groupAuthenticationType"
      ],
      "type": "object",
      "properties": {
        "groupAuthenticationType": {
          "type": "string"
        }
      },
      "discriminator": "groupAuthenticationType"
    },
    "LinkedHub": {
      "description": "The linked hub.",
      "required": [
        "linkedHubType"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the linked hub. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the linked hub.",
          "type": "string",
          "readOnly": true
        },
        "linkedHubType": {
          "type": "string"
        }
      },
      "discriminator": "linkedHubType"
    },
    "ProvisioningSettings": {
      "description": "The provisioning settings.",
      "required": [
        "assignmentMethod"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the provisioning setting. A Case-insensitive string (up to 128 characters long) of ASCII 7-bit alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or end.",
          "type": "string",
          "readOnly": true
        },
        "initialTwin": {
          "$ref": "#/definitions/InitialTwin",
          "description": "Initial device twin for devices provisioned using this settings."
        },
        "certificateIssuancePolicy": {
          "$ref": "#/definitions/DeviceCertificateIssuancePolicy",
          "description": "The certificate issuance policy for the device."
        },
        "reprovisioningSettings": {
          "$ref": "#/definitions/ReprovisioningSettings",
          "description": "The behavior when a device is re-provisioned to an IoT hub."
        },
        "assignmentMethod": {
          "$ref": "#/definitions/AssignmentMethod",
          "description": "The method of assigning to an IoT hub."
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag of the provisioning settings.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InitialTwin": {
      "description": "Initial device twin. Contains a subset of the properties of Twin.",
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/TwinCollection",
          "description": "Twin tags."
        },
        "properties": {
          "$ref": "#/definitions/InitialTwinProperties",
          "description": "Twin desired properties."
        }
      }
    },
    "DeviceCertificateIssuancePolicy": {
      "required": [
        "certificateAuthorityName",
        "validityPeriod"
      ],
      "type": "object",
      "properties": {
        "certificateAuthorityName": {
          "description": "The name of the Certificate Authority for issuing a certificate to the device.",
          "type": "string"
        },
        "validityPeriod": {
          "description": "The desired validity time period of the certificate to be issued in ISO8601 format. Example: 'P6DT5H5M'. The minimum period is 'P1D' (1 day) and the maximum period is 'P7D' (7 days).",
          "type": "string"
        }
      }
    },
    "ReprovisioningSettings": {
      "description": "The behavior of the service when a device is re-provisioned to an IoT hub.",
      "type": "object",
      "properties": {
        "updateHubAssignment": {
          "description": "When set to true (default), the Device Provisioning Service will evaluate the device's IoT Hub assignment and update it if necessary for any provisioning requests beyond the first from a given device. If set to false, the device will stay assigned to its current IoT hub.",
          "default": "true",
          "type": "boolean"
        },
        "migrateDeviceData": {
          "description": "When set to true (default), the Device Provisioning Service will migrate the device's data (twin, device capabilities, and device ID) from one IoT hub to another during an IoT hub assignment update. If set to false, the Device Provisioning Service will reset the device's data to the initial desired configuration stored in the corresponding enrollment list.",
          "default": "true",
          "type": "boolean"
        }
      }
    },
    "AssignmentMethod": {
      "required": [
        "assignmentType"
      ],
      "type": "object",
      "properties": {
        "assignmentType": {
          "type": "string"
        }
      },
      "discriminator": "assignmentType"
    },
    "InitialTwinProperties": {
      "description": "Represents the InitialTwin properties.",
      "type": "object",
      "properties": {
        "desired": {
          "$ref": "#/definitions/TwinCollection",
          "description": "Initial twin desired properties."
        }
      }
    },
    "ProvisioningRecord": {
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Device Id.",
          "type": "string",
          "readOnly": true
        },
        "groupRecordId": {
          "description": "Group record Id.",
          "type": "string",
          "readOnly": true
        },
        "assignedHub": {
          "description": "Assigned IoT Hub.",
          "type": "string",
          "readOnly": true
        },
        "assignedFromProvisioningSettings": {
          "description": "Name of provisioning settings used to assign this device to an IoT hub.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Provisioning status.",
          "default": "unassigned",
          "enum": [
            "unassigned",
            "assigning",
            "assigned",
            "failed",
            "disabled"
          ],
          "type": "string",
          "readOnly": true
        },
        "substatus": {
          "description": "Sub status for 'Assigned' devices. Possible values include - 'initialAssignment': Device has been assigned to an IoT hub for the first time, 'deviceDataMigrated': Device has been assigned to a different IoT hub and its device data was migrated from the previously assigned IoT hub. Device data was removed from the previously assigned IoT hub, 'deviceDataReset':  Device has been assigned to a different IoT hub and its device data was populated from the initial state stored in the enrollment. Device data was removed from the previously assigned IoT hub.",
          "enum": [
            "initialAssignment",
            "deviceDataMigrated",
            "deviceDataReset"
          ],
          "type": "string",
          "readOnly": true
        },
        "payload": {
          "description": "Custom data returned from the web hook to the device.",
          "type": "object",
          "readOnly": true
        },
        "authenticationMetadata": {
          "$ref": "#/definitions/AuthenticationMetadata",
          "description": "Authentication metadata.",
          "readOnly": true
        },
        "issuedX509Certificate": {
          "$ref": "#/definitions/CertificateMetadata",
          "description": "Certificate issued during device provisioning.",
          "readOnly": true
        },
        "errorCode": {
          "format": "int32",
          "description": "Error code.",
          "type": "integer",
          "readOnly": true
        },
        "errorMessage": {
          "description": "Error message.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created in UTC.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated in UTC.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AuthenticationMetadata": {
      "required": [
        "authenticationMetadataType"
      ],
      "type": "object",
      "properties": {
        "authenticationMetadataType": {
          "type": "string"
        }
      },
      "discriminator": "authenticationMetadataType"
    },
    "CertificateMetadata": {
      "type": "object",
      "properties": {
        "subjectName": {
          "type": "string",
          "readOnly": true
        },
        "sha1Thumbprint": {
          "type": "string",
          "readOnly": true
        },
        "sha256Thumbprint": {
          "type": "string",
          "readOnly": true
        },
        "issuerName": {
          "type": "string",
          "readOnly": true
        },
        "notBeforeUtc": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "notAfterUtc": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "serialNumber": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Query": {
      "required": [
        "queryType"
      ],
      "type": "object",
      "properties": {
        "queryType": {
          "type": "string"
        }
      },
      "discriminator": "queryType"
    },
    "CertificateAuthorityQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateAuthority"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "QueryNext": {
      "description": "A Json query next request.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Query"
        }
      ],
      "properties": {
        "continuationToken": {
          "description": "The continuation token to get the next page results.",
          "type": "string"
        }
      }
    },
    "DeviceGroupQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceGroup"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "DeviceRecordQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceRecord"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "GroupRecordQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupRecord"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "LinkedHubQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedHub"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "ProvisioningRecordQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisioningRecord"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "ProvisioningSettingsQueryResponse": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisioningSettings"
          },
          "readOnly": true
        },
        "continuation": {
          "$ref": "#/definitions/QueryNext",
          "description": "The continuation token for query next api.",
          "readOnly": true
        }
      }
    },
    "TwinCollection": {
      "description": "Represents a collection of properties within a Twin",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "description": "Version of the TwinCollection",
          "type": "integer"
        },
        "count": {
          "description": "Number of properties in the TwinCollection",
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "Metadata for the TwinCollection"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "Metadata": {
      "description": "Metadata for the TwinCollection",
      "type": "object",
      "properties": {
        "lastUpdated": {
          "format": "date-time",
          "description": "Last time the TwinCollection was updated",
          "type": "string"
        },
        "lastUpdatedVersion": {
          "format": "int64",
          "description": "This SHOULD be null for Reported properties metadata and MUST not be null for Desired properties metadata.",
          "type": "integer"
        }
      }
    },
    "AutoGeneratedSymmetricKeyDeviceAuthenticationMechanism": {
      "description": "Auto-generated Symmetric Key authentication method. Device will have the symmetric key auto generated by the service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeviceAuthenticationMechanism"
        }
      ],
      "properties": {
        "length": {
          "format": "int32",
          "description": "The desired length for autogenerated symmetric key in bytes.",
          "type": "integer"
        }
      }
    },
    "AutoGeneratedGroupSymmetricKeyAuthenticationMechanism": {
      "description": "Auto-generated Symmetric Key authentication method. Device will have the symmetric key auto generated by the service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GroupAuthenticationMechanism"
        }
      ],
      "properties": {
        "length": {
          "format": "int32",
          "description": "The desired length for autogenerated symmetric key in bytes.",
          "type": "integer"
        }
      }
    },
    "CertificateAuthenticationMetadata": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMetadata"
        }
      ],
      "properties": {
        "deviceCertificateMetadata": {
          "$ref": "#/definitions/CertificateMetadata",
          "description": "Device certificate metadata.",
          "readOnly": true
        },
        "certificateAuthorityMetadata": {
          "$ref": "#/definitions/CertificateMetadata",
          "description": "Certificate authority metadata.",
          "readOnly": true
        }
      }
    },
    "ConnectionStringLinkedHub": {
      "description": "The linked hub.",
      "required": [
        "connectionString",
        "location"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/LinkedHub"
        }
      ],
      "properties": {
        "connectionString": {
          "description": "The string used to connect to the IoT hub.",
          "type": "string"
        },
        "location": {
          "description": "Location of the IoT hub.",
          "type": "string"
        }
      }
    },
    "CustomAssignmentMethod": {
      "description": "Devices are provisioned to an IoT hub based on your own custom logic. The provisioning service passes information about the device to the logic, and the logic returns the desired IoT hub as well as the desired initial configuration. We recommend using Azure Functions to host your logic.",
      "required": [
        "webhookUrl",
        "apiVersion"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssignmentMethod"
        }
      ],
      "properties": {
        "webhookUrl": {
          "description": "The web hook URL used for IoT Hub assignment requests.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The API version of the provisioning service types (such as DeviceInfo) sent in the custom assignment request. Minimum supported version: \\\"2018-09-01-preview\\\".",
          "type": "string"
        },
        "targetHubs": {
          "description": "The list of IoT hubs the device(s) in this resource can be assigned to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GeoLatencyAssignmentMethod": {
      "description": "Devices are provisioned to an IoT hub with the lowest latency to the device.\r\nIf multiple linked IoT hubs would provide the same lowest latency, the provisioning service hashes devices across those hubs.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssignmentMethod"
        }
      ],
      "properties": {
        "targetHubs": {
          "description": "The list of IoT hubs the device(s) in this resource can be assigned to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HashedAssignmentMethod": {
      "description": "Target IoT hubs are equally likely to have devices provisioned to them.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssignmentMethod"
        }
      ],
      "properties": {
        "targetHubs": {
          "description": "The list of IoT hubs the device(s) in this resource can be assigned to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PrivatePreviewManagedCertificateAuthority": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CertificateAuthority"
        }
      ],
      "properties": {
        "certificates": {
          "description": "The certificates affiliated with this Certificate Authority.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateWithMetadata"
          },
          "readOnly": true
        }
      }
    },
    "CertificateWithMetadata": {
      "type": "object",
      "properties": {
        "certificateMetadata": {
          "$ref": "#/definitions/CertificateMetadata",
          "readOnly": true
        },
        "certificate": {
          "type": "string"
        }
      }
    },
    "QueryAll": {
      "description": "A Json query all request.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Query"
        }
      ],
      "properties": {}
    },
    "StaticAssignmentMethod": {
      "description": "Specify the desired IoT hub as the sole target hub.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssignmentMethod"
        }
      ],
      "properties": {
        "targetHub": {
          "description": "The IoT hub the device(s) in this resource should be assigned to.",
          "type": "string"
        }
      }
    },
    "SymmetricKeyAuthenticationMetadata": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMetadata"
        }
      ],
      "properties": {}
    },
    "SymmetricKeyDeviceAuthenticationMechanism": {
      "required": [
        "symmetricKey"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeviceAuthenticationMechanism"
        }
      ],
      "properties": {
        "symmetricKey": {
          "description": "The symmetric key used by device.",
          "type": "string"
        }
      }
    },
    "SymmetricKeyGroupAuthenticationMechanism": {
      "description": "The group symmetric key authentication. Devices in this device group use a symmetric key derived from this key.",
      "required": [
        "symmetricKey"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GroupAuthenticationMechanism"
        }
      ],
      "properties": {
        "symmetricKey": {
          "description": "Symmetric key for the group.",
          "type": "string"
        }
      }
    },
    "TpmAuthenticationMetadata": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationMetadata"
        }
      ],
      "properties": {
        "endorsementKey": {
          "description": "Tpm endorsement key.",
          "type": "string",
          "readOnly": true
        },
        "storageRootKey": {
          "description": "Tpm storage root key.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TpmDeviceAuthenticationMechanism": {
      "required": [
        "endorsementKey"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeviceAuthenticationMechanism"
        }
      ],
      "properties": {
        "endorsementKey": {
          "description": "TPM endorsement key.",
          "type": "string"
        },
        "storageRootKey": {
          "description": "TPM storage root key.",
          "type": "string"
        }
      }
    },
    "X509CAGroupAuthenticationMechanism": {
      "description": "X509 authentication method. Devices in this device group have this signing certificate in their certificate chain.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GroupAuthenticationMechanism"
        }
      ],
      "properties": {
        "certificate": {
          "description": "The signing certificate name.",
          "type": "string",
          "readOnly": true
        },
        "certificateMetadata": {
          "$ref": "#/definitions/CertificateMetadata",
          "description": "The signing certificate metadata.",
          "readOnly": true
        }
      }
    },
    "X509CAReferenceGroupAuthenticationMechanism": {
      "description": "X509 authentication method. Devices in this device group have this signing certificate in their certificate chain.",
      "required": [
        "certificateAuthorityName"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GroupAuthenticationMechanism"
        }
      ],
      "properties": {
        "certificateAuthorityName": {
          "description": "The certificate authority name.",
          "type": "string"
        }
      }
    },
    "X509CertificateDeviceAuthenticationMechanism": {
      "description": "Device identity is matched with X509 certificate presented to the service.",
      "required": [
        "certificate"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeviceAuthenticationMechanism"
        }
      ],
      "properties": {
        "certificate": {
          "description": "Device identity is matched with X509 certificate presented to the service. Basic Constraints X.509 certificate extension must be set to Subject Type = \"End Entity\" in this certificate.",
          "type": "string"
        },
        "certificateMetadata": {
          "$ref": "#/definitions/CertificateMetadata",
          "description": "The certificate metadata.",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for the request. Supported versions include: 2019-05-01",
      "required": true,
      "type": "string",
      "default": "2019-05-01"
    }
  },
  "tags": []
}