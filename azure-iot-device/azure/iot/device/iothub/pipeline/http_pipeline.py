# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# --------------------------------------------------------------------------

import logging
import sys
from azure.iot.device.common.evented_callback import EventedCallback
from azure.iot.device.common.pipeline import (
    pipeline_stages_base,
    pipeline_ops_base,
    pipeline_stages_http,
)

from azure.iot.device.iothub.pipeline import exceptions as pipeline_exceptions

from . import (
    constant,
    pipeline_stages_iothub,
    pipeline_ops_iothub,
    pipeline_ops_iothub_http,
    pipeline_stages_iothub_http,
)
from azure.iot.device.iothub.auth.x509_authentication_provider import X509AuthenticationProvider

logger = logging.getLogger(__name__)


class HTTPPipeline(object):
    """Pipeline to communicate with Edge.
    Uses HTTP.
    """

    def __init__(self, auth_provider, pipeline_configuration):
        """
        Constructor for instantiating a pipeline adapter object
        :param auth_provider: The authentication provider
        :param pipeline_configuration: The configuration generated based on user inputs
        """
        self._pipeline = (
            pipeline_stages_base.PipelineRootStage(pipeline_configuration=pipeline_configuration)
            .append_stage(pipeline_stages_iothub.UseAuthProviderStage())
            .append_stage(pipeline_stages_iothub_http.IoTHubHTTPTranslationStage())
            .append_stage(pipeline_stages_http.HTTPTransportStage())
        )

        callback = EventedCallback()

        if isinstance(auth_provider, X509AuthenticationProvider):
            op = pipeline_ops_iothub.SetX509AuthProviderOperation(
                auth_provider=auth_provider, callback=callback
            )
        else:  # Currently everything else goes via this block.
            op = pipeline_ops_iothub.SetAuthProviderOperation(
                auth_provider=auth_provider, callback=callback
            )

        self._pipeline.run_op(op)
        callback.wait_for_completion()

    def invoke_method(self, device_id, method_params, callback, module_id=None):
        """
        Send a method response to the service.
        """
        logger.debug("IoTHubPipeline invoke_method called")
        if not self._pipeline.pipeline_configuration.method_invoke:
            # If this parameter is not set, that means that the pipeline was not generated by the edge environment. Method invoke only works for clients generated using the edge environment.
            error = pipeline_exceptions.PipelineError(
                "invoke_method called, but it is only supported on module clients generated from an edge environment. If you are not using a module generated from an edge environment, you cannot use invoke_method"
            )
            return callback(error=error)

        def on_complete(op, error):
            callback(error=error, invoke_method_response=op.method_response)

        self._pipeline.run_op(
            pipeline_ops_iothub_http.MethodInvokeOperation(
                target_device_id=device_id,
                target_module_id=module_id,
                method_params=method_params,
                callback=on_complete,
            )
        )

    def get_storage_info(self, blob_name, callback):
        logger.debug("IoTHubPipeline get_storage_info called")
        if not self._pipeline.pipeline_configuration.blob_upload:
            # If this parameter is not set, that means this is not a device client. Upload to blob is not supported on module clients.
            error = pipeline_exceptions.PipelineError(
                "get_storage_info called, but it is only supported for use with device clients. Ensure you are using a device client."
            )
            return callback(error=error)

        def on_complete(op, error):
            callback(error=error, storage_info=op.storage_info)

        self._pipeline.run_op(
            pipeline_ops_iothub_http.GetStorageInfoOperation(
                blob_name=blob_name, callback=on_complete
            )
        )

    def notify_blob_upload_status(
        self, correlation_id, is_success, status_code, status_description, callback
    ):
        logger.debug("IoTHubPipeline notify_blob_upload_status called")
        if not self._pipeline.pipeline_configuration.blob_upload:
            # If this parameter is not set, that means this is not a device client. Upload to blob is not supported on module clients.
            error = pipeline_exceptions.PipelineError(
                "notify_blob_upload_status called, but it is only supported for use with device clients. Ensure you are using a device client."
            )
            return callback(error=error)

        def on_complete(op, error):
            callback(error=error)

        self._pipeline.run_op(
            pipeline_ops_iothub_http.NotifyBlobUploadStatusOperation(
                correlation_id=correlation_id,
                is_success=is_success,
                status_code=status_code,
                status_description=status_description,
                callback=on_complete,
            )
        )
