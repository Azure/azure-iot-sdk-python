fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700    1) # --------------------------------------------------------------------------
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    2) # Copyright (c) Microsoft Corporation. All rights reserved.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    3) # Licensed under the MIT License. See License.txt in the project root for
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    4) # license information.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    5) # --------------------------------------------------------------------------
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    6) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    7) import logging
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    8) import abc
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700    9) import six
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700   10) import sys
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700   11) import time
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800   12) import traceback
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700   13) import uuid
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700   14) import weakref
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800   15) import threading
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700   16) from six.moves import queue
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700   17) from . import pipeline_events_base
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700   18) from . import pipeline_ops_base, pipeline_ops_mqtt
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700   19) from . import pipeline_thread
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700   20) from . import pipeline_exceptions
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800   21) from azure.iot.device.common import handle_exceptions, transport_exceptions
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700   22) from azure.iot.device.common.callable_weak_method import CallableWeakMethod
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   23) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   24) logger = logging.getLogger(__name__)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   25) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   26) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   27) @six.add_metaclass(abc.ABCMeta)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700   28) class PipelineStage(object):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   29)     """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   30)     Base class representing a stage in the processing pipeline.  Each stage is responsible for receiving
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   31)     PipelineOperation objects from the top, possibly processing them, and possibly passing them down.  It
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   32)     is also responsible for receiving PipelineEvent objects from the bottom, possibly processing them, and
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   33)     possibly passing them up.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   34) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   35)     Each PipelineStage in the pipeline, is expected to act on some well-defined set of PipelineOperation
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   36)     types and/or some set of PipelineEvent types.  If any stage does not act on an operation or event, it
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   37)     should pass it to the next stage (for operations) or the previous stage (for events).  In this way, the
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   38)     pipeline implements the "chain of responsibility" design pattern (Gamma, et.al. "Design Patterns".
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   39)     Addison Wesley. 1995), with each stage being responsible for implementing some "rule" or "policy" of the
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   40)     pipeline, and each stage being ignorant of the stages that are before or after it in the pipeline.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   41) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   42)     Each stage in the pipeline should act on the smallest set of rules possible, thus making stages small
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   43)     and easily testable.  Complex logic should be the exception and not the rule, and complex stages should
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   44)     operate on the most generic type of operation possible, thus allowing us to re-use complex logic for
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   45)     multiple cases.  The best way to do this is with "converter" stages that convert a specific operation to
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   46)     a more general one and with other converter stages that convert general operations to more specific ones.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   47) 
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700   48)     An example of a specific-to-generic stage is UseSkAuthProviderStage which takes a specific operation
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   49)     (use an auth provider) and converts it into something more generic (here is your device_id, etc, and use
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   50)     this SAS token when connecting).
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   51) 
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700   52)     An example of a generic-to-specific stage is IoTHubMQTTTranslationStage which converts IoTHub operations
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700   53)     (such as SendD2CMessageOperation) to MQTT operations (such as Publish).
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   54) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   55)     Each stage should also work in the broadest domain possible.  For example a generic stage (say
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700   56)     "AutoConnectStage") that initiates a connection if any arbitrary operation needs a connection is more useful
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   57)     than having some MQTT-specific code that re-connects to the MQTT broker if the user calls Publish and
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   58)     there's no connection.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   59) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   60)     One way to think about stages is to look at every "block of functionality" in your code and ask yourself
31771f9f5 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-13 13:56:08 -0700   61)     "is this the one and only time I will need this code"?  If the answer is no, it might be worthwhile to
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   62)     implement that code in it's own stage in a very generic way.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   63) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   64) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   65)     :ivar name: The name of the stage.  This is used primarily for logging
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   66)     :type name: str
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   67)     :ivar next: The next stage in the pipeline.  Set to None if this is the last stage in the pipeline.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   68)     :type next: PipelineStage
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   69)     :ivar previous: The previous stage in the pipeline.  Set to None if this is the first stage in the pipeline.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   70)     :type previous: PipelineStage
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   71)     :ivar pipeline_root: The first stage (root) of the pipeline.  This is useful if a stage wants to
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   72)       submit an operation to the pipeline starting at the root.  This type of behavior is uncommon but not
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   73)       unexpected.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   74)     :type pipeline_root: PipelineStage
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   75)     """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   76) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   77)     def __init__(self):
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   78)         """
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   79)         Initializer for PipelineStage objects.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   80)         """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   81)         self.name = self.__class__.__name__
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   82)         self.next = None
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   83)         self.previous = None
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   84)         self.pipeline_root = None
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   85) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700   86)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   87)     def run_op(self, op):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   88)         """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700   89)         Run the given operation.  This is the public function that outside callers would call to run an
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800   90)         operation.  Derived classes should override the private _run_op function to implement
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   91)         stage-specific behavior.  When run_op returns, that doesn't mean that the operation has executed
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   92)         to completion.  Rather, it means that the pipeline has done something that will cause the
31771f9f5 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-13 13:56:08 -0700   93)         operation to eventually execute to completion.  That might mean that something was sent over
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   94)         the network and some stage is waiting for a reply, or it might mean that the operation is sitting
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   95)         in a queue until something happens, or it could mean something entirely different.  The only
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   96)         thing you can assume is that the operation will _eventually_ complete successfully or fail, and the
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   97)         operation's callback will be called when that happens.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   98) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700   99)         :param PipelineOperation op: The operation to run.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  100)         """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  101)         try:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  102)             self._run_op(op)
7f376b0a9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-05 13:33:39 -0700  103)         except Exception as e:
5fb7fbcda azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-08-08 15:20:28 -0700  104)             # This path is ONLY for unexpected errors. Expected errors should cause a fail completion
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  105)             # within ._run_op()
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  106) 
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  107)             # Do not use exc_info parameter on logger.error.  This casuses pytest to save the traceback which saves stack frames which shows up as a leak
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  108)             logger.error(msg="Unexpected error in {}._run_op() call".format(self))
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  109)             logger.error(traceback.format_exc())
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  110)             op.complete(error=e)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  111) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  112)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  113)     def _run_op(self, op):
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  114)         """
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  115)         Implementation of the stage-specific function of .run_op(). Override this method instead of
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  116)         .run_op() in child classes in order to change how a stage behaves when running an operation.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  117) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  118)         See the description of the .run_op() method for more discussion on what it means to "run"
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  119)         an operation.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  120) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  121)         :param PipelineOperation op: The operation to run.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  122)         """
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  123)         self.send_op_down(op)
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  124) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  125)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  126)     def handle_pipeline_event(self, event):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  127)         """
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  128)         Handle a pipeline event that arrives from the stage below this stage.  Derived
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  129)         classes should not override this function.  Any stage-specific handling of
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  130)         PipelineEvent objects should be implemented by overriding the private
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  131)         _handle_pipeline_event function in the derived stage.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  132) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  133)         :param PipelineEvent event: The event that is being passed back up the pipeline
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  134)         """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  135)         try:
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  136)             self._handle_pipeline_event(event)
7f376b0a9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-05 13:33:39 -0700  137)         except Exception as e:
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  138)             # Do not use exc_info parameter on logger.error.  This casuses pytest to save the traceback which saves stack frames which shows up as a leak
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  139)             logger.error(msg="Unexpected error in {}._handle_pipeline_event() call".format(self))
b1556f882 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-10 20:27:12 -0800  140)             logger.error(traceback.format_exc())
f526dbffe azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-09-23 17:27:00 -0700  141)             handle_exceptions.handle_background_exception(e)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  142) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  143)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  144)     def _handle_pipeline_event(self, event):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  145)         """
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  146)         Handle a pipeline event that arrives from the stage below this stage.  This
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  147)         is a function that is intended to be overridden in any stages that want to implement
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  148)         stage-specific handling of any events
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  149) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  150)         :param PipelineEvent event: The event that is being passed back up the pipeline
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  151)         """
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  152)         self.send_event_up(event)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  153) 
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  154)     @pipeline_thread.runs_on_pipeline_thread
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  155)     def send_op_down(self, op):
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  156)         """
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  157)         Helper function to continue a given operation by passing it to the next stage
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  158)         in the pipeline.  If there is no next stage in the pipeline, this function
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  159)         will fail the operation and call complete_op to return the failure back up the
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  160)         pipeline.
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  161) 
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  162)         :param PipelineOperation op: Operation which is being passed on
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  163)         """
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  164)         if not self.next:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  165)             logger.error("{}({}): no next stage.  completing with error".format(self.name, op.name))
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  166)             error = pipeline_exceptions.PipelineError(
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  167)                 "{} not handled after {} stage with no next stage".format(op.name, self.name)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  168)             )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  169)             op.complete(error=error)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  170)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  171)             self.next.run_op(op)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  172) 
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  173)     @pipeline_thread.runs_on_pipeline_thread
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  174)     def send_event_up(self, event):
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  175)         """
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  176)         Helper function to pass an event to the previous stage of the pipeline.  This is the default
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  177)         behavior of events while traveling through the pipeline. They start somewhere (maybe the
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  178)         bottom) and move up the pipeline until they're handled or until they error out.
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  179)         """
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  180)         if self.previous:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  181)             self.previous.handle_pipeline_event(event)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  182)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  183)             logger.error("{}({}): Error: unhandled event".format(self.name, event.name))
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  184)             error = pipeline_exceptions.PipelineError(
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  185)                 "{} unhandled at {} stage with no previous stage".format(event.name, self.name)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  186)             )
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  187)             handle_exceptions.handle_background_exception(error)
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  188) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  189) 
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700  190) class PipelineRootStage(PipelineStage):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  191)     """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  192)     Object representing the root of a pipeline.  This is where the functions to build
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  193)     the pipeline exist.  This is also where clients can add event handlers to receive
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  194)     events from the pipeline.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  195) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  196)     :ivar on_pipeline_event_handler: Handler which can be set by users of the pipeline to
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  197)       receive PipelineEvent objects.  This is how users receive any "unsolicited"
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  198)       events from the pipeline (such as C2D messages).  This function is called with
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  199)       a PipelineEvent object every time any such event occurs.
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  200)     :type on_pipeline_event_handler: Function
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  201)     :ivar on_connected_handler: Handler which can be set by users of the pipeline to
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  202)       receive events every time the underlying transport connects
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  203)     :type on_connected_handler: Function
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  204)     :ivar on_disconnected_handler: Handler which can be set by users of the pipeline to
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  205)       receive events every time the underlying transport disconnects
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  206)     :type on_disconnected_handler: Function
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  207)     """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  208) 
06d0a38dc azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Yoseph Maguire 2019-10-18 11:58:29 -0700  209)     def __init__(self, pipeline_configuration):
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700  210)         super(PipelineRootStage, self).__init__()
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  211)         self.on_pipeline_event_handler = None
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  212)         self.on_connected_handler = None
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  213)         self.on_disconnected_handler = None
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  214)         self.connected = False
0f4e05cf8 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Yoseph Maguire 2019-10-16 16:39:57 -0700  215)         self.pipeline_configuration = pipeline_configuration
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  216) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  217)     def run_op(self, op):
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  218)         # CT-TODO: make this more elegant
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  219)         op.callback_stack[0] = pipeline_thread.invoke_on_callback_thread_nowait(
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  220)             op.callback_stack[0]
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  221)         )
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  222)         pipeline_thread.invoke_on_pipeline_thread(super(PipelineRootStage, self).run_op)(op)
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  223) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  224)     def append_stage(self, new_stage):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  225)         """
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  226)         Add the next stage to the end of the pipeline.  This is the function that callers
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  227)         use to build the pipeline by appending stages.  This function returns the root of
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  228)         the pipeline so that calls to this function can be chained together.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  229) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  230)         :param PipelineStage new_stage: Stage to add to the end of the pipeline
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  231)         :returns: The root of the pipeline.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  232)         """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  233)         old_tail = self
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  234)         while old_tail.next:
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  235)             old_tail = old_tail.next
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  236)         old_tail.next = new_stage
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  237)         new_stage.previous = old_tail
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  238)         new_stage.pipeline_root = self
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  239)         return self
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  240) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  241)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  242)     def _handle_pipeline_event(self, event):
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  243)         """
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  244)         Override of the PipelineEvent handler.  Because this is the root of the pipeline,
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  245)         this function calls the on_pipeline_event_handler to pass the event to the
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  246)         caller.
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  247) 
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  248)         :param PipelineEvent event: Event to be handled, i.e. returned to the caller
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  249)           through the handle_pipeline_event (if provided).
4a7dc5550 azure-iot-device/azure/iot/device/common/transport/pipeline_stages_base.py      (Bert Kleewein  2019-05-09 12:47:51 -0700  250)         """
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  251)         if isinstance(event, pipeline_events_base.ConnectedEvent):
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  252)             logger.debug(
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  253)                 "{}: ConnectedEvent received. Calling on_connected_handler".format(self.name)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  254)             )
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  255)             self.connected = True
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  256)             if self.on_connected_handler:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  257)                 pipeline_thread.invoke_on_callback_thread_nowait(self.on_connected_handler)()
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  258) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  259)         elif isinstance(event, pipeline_events_base.DisconnectedEvent):
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  260)             logger.debug(
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  261)                 "{}: DisconnectedEvent received. Calling on_disconnected_handler".format(self.name)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  262)             )
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  263)             self.connected = False
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  264)             if self.on_disconnected_handler:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  265)                 pipeline_thread.invoke_on_callback_thread_nowait(self.on_disconnected_handler)()
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  266) 
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  267)         else:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  268)             if self.on_pipeline_event_handler:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  269)                 pipeline_thread.invoke_on_callback_thread_nowait(self.on_pipeline_event_handler)(
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  270)                     event
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  271)                 )
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  272)             else:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  273)                 logger.warning("incoming pipeline event with no handler.  dropping.")
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  274) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  275) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  276) # NOTE: This stage could be a candidate for being refactored into some kind of other
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  277) # pipeline-related structure. What's odd about it as a stage is that it doesn't really respond
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  278) # to operations or events so much as it spawns them on a timer.
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  279) # Perhaps some kind of... Pipeline Daemon?
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  280) class SasTokenRenewalStage(PipelineStage):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  281)     # Amount of time, in seconds, prior to token expiration, when the renewal process will begin
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  282)     DEFAULT_TOKEN_RENEWAL_MARGIN = 120
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  283) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  284)     def __init__(self):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  285)         super(SasTokenRenewalStage, self).__init__()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  286)         self._token_renewal_timer = None
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  287) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  288)     @pipeline_thread.runs_on_pipeline_thread
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  289)     def _run_op(self, op):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  290)         if (
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  291)             isinstance(op, pipeline_ops_base.InitializePipelineOperation)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  292)             and self.pipeline_root.pipeline_configuration.sastoken
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  293)         ):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  294)             self._start_renewal_timer()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  295)             self.send_op_down(op)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  296)         else:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  297)             self.send_op_down(op)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  298) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  299)     @pipeline_thread.runs_on_pipeline_thread
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  300)     def _cancel_token_renewal_timer(self):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  301)         """Cancel and delete any pending renewal timer"""
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  302)         timer = self._token_renewal_timer
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  303)         self._token_renewal_timer = None
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  304)         if timer:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  305)             logger.debug("Cancelling SAS Token renewal timer")
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  306)             timer.cancel()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  307) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  308)     @pipeline_thread.runs_on_pipeline_thread
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  309)     def _start_renewal_timer(self):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  310)         """Begin a renewal timer.
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  311)         When the timer expires, and the token is renewed, a new timer will be set"""
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  312)         self._cancel_token_renewal_timer()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  313)         # NOTE: The assumption here is that the SasToken has just been refreshed, so there is
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  314)         # approximately 'TTL' seconds until expiration. In practice this could probably be off
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  315)         # a few seconds given processing time. We could make this more accurate if SasToken
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  316)         # objects had a live TTL value rather than a static one (i.e. "there are n seconds
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  317)         # remaining in the lifespan of this token", rather than "this token was intended to live
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  318)         # for n seconds")
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  319)         seconds_until_renewal = (
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  320)             self.pipeline_root.pipeline_configuration.sastoken.ttl
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  321)             - self.DEFAULT_TOKEN_RENEWAL_MARGIN
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  322)         )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  323)         if seconds_until_renewal < 0:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  324)             # This shouldn't happen in correct flow, but it's possible I suppose, if something goes
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  325)             # horribly awry elsewhere in the stack, or if we start allowing for custom
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  326)             # SasToken TTLs or custom Renewal Margins in the future
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  327)             logger.error("ERROR: SasToken TTL less than Renewal Margin")
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  328)             handle_exceptions.handle_background_exception(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  329)                 pipeline_exceptions.PipelineError("SasToken TTL less than Renewal Margin!")
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  330)             )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  331)         else:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  332)             logger.debug(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  333)                 "Scheduling SAS Token renewal for {} seconds in the future".format(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  334)                     seconds_until_renewal
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  335)                 )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  336)             )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  337)             self_weakref = weakref.ref(self)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  338) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  339)             @pipeline_thread.runs_on_pipeline_thread
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  340)             def on_reauthorize_complete(op, error):
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  341)                 this = self_weakref()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  342)                 if error:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  343)                     logger.error(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  344)                         "{}({}): reauthorize connection operation failed.  Error={}".format(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  345)                             this.name, op.name, error
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  346)                         )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  347)                     )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  348)                     handle_exceptions.handle_background_exception(error)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  349)                 else:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  350)                     logger.debug(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  351)                         "{}({}): reauthorize connection operation is complete".format(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  352)                             this.name, op.name
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  353)                         )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  354)                     )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  355) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  356)             @pipeline_thread.invoke_on_pipeline_thread_nowait
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  357)             def renew_token():
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  358)                 this = self_weakref()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  359)                 logger.debug("Renewing SAS Token")
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  360)                 # Renew the token
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  361)                 sastoken = this.pipeline_root.pipeline_configuration.sastoken
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  362)                 sastoken.refresh()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  363)                 # If the pipeline is already connected, send order to reauthorize the connection
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  364)                 # now that token has been renewed
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  365)                 if this.pipeline_root.connected:
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  366)                     this.send_op_down(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  367)                         pipeline_ops_base.ReauthorizeConnectionOperation(
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  368)                             callback=on_reauthorize_complete
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  369)                         )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  370)                     )
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  371)                 # Once again, start a renewal timer
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  372)                 this._start_renewal_timer()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  373) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  374)             self._token_renewal_timer = threading.Timer(seconds_until_renewal, renew_token)
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  375)             self._token_renewal_timer.daemon = True
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  376)             self._token_renewal_timer.start()
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  377) 
fd27e8cd2 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2020-05-27 11:09:57 -0700  378) 
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  379) class AutoConnectStage(PipelineStage):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  380)     """
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700  381)     This stage is responsible for ensuring that the protocol is connected when
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  382)     it needs to be connected.
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  383)     """
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  384) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  385)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  386)     def _run_op(self, op):
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  387)         # Any operation that requires a connection can trigger a connection if
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  388)         # we're not connected.
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  389)         if op.needs_connection:
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  390)             if self.pipeline_root.connected:
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  391) 
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  392)                 # If we think we're connected, we pass the op down, but we also check the result.
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  393)                 # If we fail the op and we're not connected when we're done, we run through this
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  394)                 # stage again to connect.  This is more common than you might think because the
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  395)                 # *nix network stack won't detect a dropped connection until the client tries to
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  396)                 # send something, so it's very possible that we're disconnected but don't know
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  397)                 # it yet.
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  398) 
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  399)                 @pipeline_thread.runs_on_pipeline_thread
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  400)                 def check_for_connection_failure(op, error):
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  401)                     if error and not self.pipeline_root.connected:
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  402)                         logger.info(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  403)                             "{}({}): op failed with {} and we're not conencted.  Re-submitting.".format(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  404)                                 self.name, op.name, error
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  405)                             )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  406)                         )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  407)                         op.halt_completion()
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  408)                         self.run_op(op)
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  409) 
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  410)                 op.add_callback(check_for_connection_failure)
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  411)                 logger.info(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  412)                     "{}({}): Connected.  Sending down and adding callback to check result".format(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  413)                         self.name, op.name
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  414)                     )
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  415)                 )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  416)                 self.send_op_down(op)
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  417)             else:
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  418)                 # operation needs connection, but pipeline is not connected.
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  419)                 logger.debug(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  420)                     "{}({}): Op needs connection.  Queueing this op and starting a ConnectionOperation".format(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  421)                         self.name, op.name
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  422)                     )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  423)                 )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  424)                 self._do_connect(op)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  425) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  426)         # Finally, if this stage doesn't need to do anything else with this operation,
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  427)         # it just passes it down.
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  428)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  429)             self.send_op_down(op)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  430) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  431)     @pipeline_thread.runs_on_pipeline_thread
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  432)     def _do_connect(self, op):
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  433)         """
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  434)         Start connecting the transport in response to some operation
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  435)         """
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  436)         # Alias to avoid overload within the callback below
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  437)         # CT-TODO: remove the need for this with better callback semantics
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  438)         op_needs_complete = op
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  439) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  440)         # function that gets called after we're connected.
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  441)         @pipeline_thread.runs_on_pipeline_thread
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  442)         def on_connect_op_complete(op, error):
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700  443)             if error:
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  444)                 logger.info(
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  445)                     "{}({}): Connection failed.  Completing with failure because of connection failure: {}".format(
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  446)                         self.name, op_needs_complete.name, error
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  447)                     )
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  448)                 )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  449)                 op_needs_complete.complete(error=error)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  450)             else:
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  451)                 logger.debug(
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  452)                     "{}({}): connection is complete.  Running op that triggered connection.".format(
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  453)                         self.name, op_needs_complete.name
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  454)                     )
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  455)                 )
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  456)                 # use run_op instead of send_op_down because we want the check_for_connection_failure logic
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  457)                 # above to run.  Just because we just connected, it doesn't mean the connection won't drop
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  458)                 # before we're done sending.  (This does actually happen in stress scenarios)
66de7031a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-06 22:20:23 -0800  459)                 self.run_op(op_needs_complete)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  460) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  461)         # call down to the next stage to connect.
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  462)         logger.debug("{}({}): calling down with Connect operation".format(self.name, op.name))
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  463)         self.send_op_down(pipeline_ops_base.ConnectOperation(callback=on_connect_op_complete))
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  464) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  465) 
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  466) class ConnectionLockStage(PipelineStage):
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  467)     """
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  468)     This stage is responsible for serializing connect, disconnect, and reauthorize ops on
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  469)     the pipeline, such that only a single one of these ops can go past this stage at a
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  470)     time.  This way, we don't have to worry about cases like "what happens if we try to
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  471)     disconnect if we're in the middle of reauthorizing."  This stage will wait for the
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  472)     reauthorize to complete before letting the disconnect past.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  473)     """
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  474) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  475)     def __init__(self):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  476)         super(ConnectionLockStage, self).__init__()
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  477)         self.queue = queue.Queue()
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  478)         self.blocked = False
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  479) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  480)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  481)     def _run_op(self, op):
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  482) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  483)         # If this stage is currently blocked (because we're waiting for a connection, etc,
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  484)         # to complete), we queue up all operations until after the connect completes.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  485)         if self.blocked:
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  486)             logger.info(
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  487)                 "{}({}): pipeline is blocked waiting for a prior connect/disconnect/reauthorize to complete.  queueing.".format(
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  488)                     self.name, op.name
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  489)                 )
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  490)             )
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  491)             self.queue.put_nowait(op)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  492) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  493)         elif isinstance(op, pipeline_ops_base.ConnectOperation) and self.pipeline_root.connected:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  494)             logger.info(
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  495)                 "{}({}): Transport is already connected.  Completing.".format(self.name, op.name)
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  496)             )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  497)             op.complete()
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  498) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  499)         elif (
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  500)             isinstance(op, pipeline_ops_base.DisconnectOperation)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  501)             and not self.pipeline_root.connected
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  502)         ):
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  503)             logger.info(
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  504)                 "{}({}): Transport is already disconnected.  Completing.".format(self.name, op.name)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  505)             )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  506)             op.complete()
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  507) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  508)         elif (
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  509)             isinstance(op, pipeline_ops_base.DisconnectOperation)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  510)             or isinstance(op, pipeline_ops_base.ConnectOperation)
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  511)             or isinstance(op, pipeline_ops_base.ReauthorizeConnectionOperation)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  512)         ):
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  513)             self._block(op)
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  514) 
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  515)             @pipeline_thread.runs_on_pipeline_thread
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700  516)             def on_operation_complete(op, error):
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700  517)                 if error:
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  518)                     logger.error(
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  519)                         "{}({}): op failed.  Unblocking queue with error: {}".format(
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700  520)                             self.name, op.name, error
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  521)                         )
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  522)                     )
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  523)                 else:
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  524)                     logger.debug(
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  525)                         "{}({}): op succeeded.  Unblocking queue".format(self.name, op.name)
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  526)                     )
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  527) 
6d2ccbfb5 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-11 06:16:17 -0700  528)                 self._unblock(op, error)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  529) 
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  530)             op.add_callback(on_operation_complete)
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  531)             self.send_op_down(op)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  532) 
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  533)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  534)             self.send_op_down(op)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  535) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  536)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  537)     def _block(self, op):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  538)         """
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  539)         block this stage while we're waiting for the connect/disconnect/reauthorize operation to complete.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  540)         """
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  541)         logger.debug("{}({}): blocking".format(self.name, op.name))
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  542)         self.blocked = True
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  543) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  544)     @pipeline_thread.runs_on_pipeline_thread
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  545)     def _unblock(self, op, error):
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  546)         """
ac75aec92 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-12-02 15:14:54 -0800  547)         Unblock this stage after the connect/disconnect/reauthorize operation is complete.  This also means
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  548)         releasing all the operations that were queued up.
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  549)         """
2c485b1d9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 14:39:55 -0700  550)         logger.debug("{}({}): unblocking and releasing queued ops.".format(self.name, op.name))
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  551)         self.blocked = False
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  552)         logger.info(
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  553)             "{}({}): processing {} items in queue".format(self.name, op.name, self.queue.qsize())
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  554)         )
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  555)         # Loop through our queue and release all the blocked operations
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  556)         # Put a new Queue in self.queue because releasing ops might put them back in the
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  557)         # queue, especially if there's a ConnectOperation in the list of ops to release
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  558)         old_queue = self.queue
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  559)         self.queue = queue.Queue()
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  560)         while not old_queue.empty():
8407103bf azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-08-14 07:13:59 -0700  561)             op_to_release = old_queue.get_nowait()
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  562)             if error:
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  563)                 # if we're unblocking the queue because something (like a connect operation) failed,
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  564)                 # then we fail all of the blocked operations with the same error.
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  565)                 logger.error(
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  566)                     "{}({}): failing {} op because of error".format(
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  567)                         self.name, op.name, op_to_release.name
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  568)                     )
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  569)                 )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  570)                 op_to_release.complete(error=error)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  571)             else:
2c485b1d9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 14:39:55 -0700  572)                 logger.debug(
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  573)                     "{}({}): releasing {} op.".format(self.name, op.name, op_to_release.name)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  574)                 )
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  575)                 # call run_op directly here so operations go through this stage again (especially connect/disconnect ops)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  576)                 self.run_op(op_to_release)
503bf201f azure-iot-device/azure/iot/device/common/transport/mqtt/pipeline_stages_base.py (Bert Kleewein  2019-05-01 15:50:05 -0700  577) 
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  578) 
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700  579) class CoordinateRequestAndResponseStage(PipelineStage):
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  580)     """
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  581)     Pipeline stage which is responsible for coordinating RequestAndResponseOperation operations.  For each
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  582)     RequestAndResponseOperation operation, this stage passes down a RequestOperation operation and waits for
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  583)     an ResponseEvent event.  All other events are passed down unmodified.
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  584)     """
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  585) 
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  586)     def __init__(self):
39cb3c1cb azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-21 20:31:14 -0700  587)         super(CoordinateRequestAndResponseStage, self).__init__()
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  588)         self.pending_responses = {}
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  589) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  590)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  591)     def _run_op(self, op):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  592)         if isinstance(op, pipeline_ops_base.RequestAndResponseOperation):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  593)             # Convert RequestAndResponseOperation operation into a RequestOperation operation
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  594)             # and send it down.  A lower level will convert the RequestOperation into an
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  595)             # actual protocol client operation.  The RequestAndResponseOperation operation will be
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  596)             # completed when the corresponding IotResponse event is received in this stage.
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  597) 
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  598)             request_id = str(uuid.uuid4())
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  599) 
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  600)             logger.debug(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  601)                 "{}({}): adding request {} to pending list".format(self.name, op.name, request_id)
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  602)             )
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  603)             self.pending_responses[request_id] = op
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  604) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  605)             self._send_request_down(request_id, op)
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  606) 
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  607)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  608)             self.send_op_down(op)
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  609) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  610)     @pipeline_thread.runs_on_pipeline_thread
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  611)     def _send_request_down(self, request_id, op):
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  612)         # Alias to avoid overload within the callback below
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  613)         # CT-TODO: remove the need for this with better callback semantics
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  614)         op_waiting_for_response = op
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  615) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  616)         @pipeline_thread.runs_on_pipeline_thread
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  617)         def on_send_request_done(op, error):
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  618)             logger.debug(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  619)                 "{}({}): Finished sending {} request to {} resource {}".format(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  620)                     self.name,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  621)                     op_waiting_for_response.name,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  622)                     op_waiting_for_response.request_type,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  623)                     op_waiting_for_response.method,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  624)                     op_waiting_for_response.resource_location,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  625)                 )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  626)             )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  627)             if error:
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  628)                 logger.debug(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  629)                     "{}({}): removing request {} from pending list".format(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  630)                         self.name, op_waiting_for_response.name, request_id
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  631)                     )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  632)                 )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  633)                 del (self.pending_responses[request_id])
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  634)                 op_waiting_for_response.complete(error=error)
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  635)             else:
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  636)                 # request sent.  Nothing to do except wait for the response
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  637)                 pass
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  638) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  639)         logger.debug(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  640)             "{}({}): Sending {} request to {} resource {}".format(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  641)                 self.name, op.name, op.request_type, op.method, op.resource_location
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  642)             )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  643)         )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  644) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  645)         new_op = pipeline_ops_base.RequestOperation(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  646)             method=op.method,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  647)             resource_location=op.resource_location,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  648)             request_body=op.request_body,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  649)             request_id=request_id,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  650)             request_type=op.request_type,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  651)             callback=on_send_request_done,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  652)             query_params=op.query_params,
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  653)         )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  654)         self.send_op_down(new_op)
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  655) 
120645973 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-07-22 06:03:27 -0700  656)     @pipeline_thread.runs_on_pipeline_thread
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  657)     def _handle_pipeline_event(self, event):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  658)         if isinstance(event, pipeline_events_base.ResponseEvent):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  659)             # match ResponseEvent events to the saved dictionary of RequestAndResponseOperation
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  660)             # operations which have not received responses yet.  If the operation is found,
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  661)             # complete it.
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  662) 
0824fb373 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 13:22:06 -0700  663)             logger.debug(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  664)                 "{}({}): Handling event with request_id {}".format(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  665)                     self.name, event.name, event.request_id
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  666)                 )
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  667)             )
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  668)             if event.request_id in self.pending_responses:
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  669)                 op = self.pending_responses[event.request_id]
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  670)                 del (self.pending_responses[event.request_id])
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  671)                 op.status_code = event.status_code
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  672)                 op.response_body = event.response_body
637278293 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (olivakar       2020-01-28 11:31:57 -0800  673)                 op.retry_after = event.retry_after
2c485b1d9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-09-05 14:39:55 -0700  674)                 logger.debug(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  675)                     "{}({}): Completing {} request to {} resource {} with status {}".format(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  676)                         self.name,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  677)                         op.name,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  678)                         op.request_type,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  679)                         op.method,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  680)                         op.resource_location,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  681)                         op.status_code,
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  682)                     )
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  683)                 )
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  684)                 op.complete()
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  685)             else:
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  686)                 logger.warning(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  687)                     "{}({}): request_id {} not found in pending list.  Nothing to do.  Dropping".format(
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  688)                         self.name, event.name, event.request_id
89ce0dba3 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-06-24 20:15:05 -0700  689)                     )
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  690)                 )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  691) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  692)         elif isinstance(event, pipeline_events_base.ConnectedEvent):
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  693)             """
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  694)             If we're reconnecting, send all pending requests down again.  This is necessary
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  695)             because any response that might have been sent by the service was possibly lost
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  696)             when the connection dropped.  The fact that the operation is still pending means
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  697)             that we haven't received the response yet.  Sending the request more than once
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  698)             will result in a reasonable response for all known operations, aside from extra
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  699)             processing on the server in the case of a re-sent provisioing request, or the
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  700)             appearance of a jump in $version attributes in the case of a lost twin PATCH
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  701)             operation.  Since we're reusing the same $rid, the server, of course, _could_
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  702)             recognize that this is a duplicate request, but the behavior in this case is
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  703)             undefined.
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  704)             """
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  705) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  706)             self.send_event_up(event)
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  707) 
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  708)             for request_id in self.pending_responses:
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  709)                 logger.info(
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  710)                     "{}: ConnectedEvent: re-publishing request {}".format(self.name, request_id)
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  711)                 )
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  712)                 self._send_request_down(request_id, self.pending_responses[request_id])
8bcee649c azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-03-31 07:48:52 -0700  713) 
1ee276b82 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-05-29 17:16:41 -0700  714)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  715)             self.send_event_up(event)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  716) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  717) 
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  718) class OpTimeoutStage(PipelineStage):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  719)     """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  720)     The purpose of the timeout stage is to add timeout errors to select operations
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  721) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  722)     The timeout_intervals attribute contains a list of operations to track along with
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  723)     their timeout values.  Right now this list is hard-coded but the operations and
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  724)     intervals will eventually become a parameter.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  725) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  726)     For each operation that needs a timeout check, this stage will add a timer to
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  727)     the operation.  If the timer elapses, this stage will fail the operation with
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  728)     a PipelineTimeoutError.  The intention is that a higher stage will know what to
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  729)     do with that error and act accordingly (either return the error to the user or
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  730)     retry).
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  731) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  732)     This stage currently assumes that all timed out operation are just "lost".
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  733)     It does not attempt to cancel the operation, as Paho doesn't have a way to
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  734)     cancel an operation, and with QOS=1, sending a pub or sub twice is not
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  735)     catastrophic.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  736) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  737)     Also, as a long-term plan, the operations that need to be watched for timeout
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  738)     will become an initialization parameter for this stage so that differet
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  739)     instances of this stage can watch for timeouts on different operations.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  740)     This will be done because we want a lower-level timeout stage which can watch
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  741)     for timeouts at the MQTT level, and we want a higher-level timeout stage which
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  742)     can watch for timeouts at the iothub level.  In this way, an MQTT operation that
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  743)     times out can be retried as an MQTT operation and a higher-level IoTHub operation
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  744)     which times out can be retried as an IoTHub operation (which might necessitate
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  745)     redoing multiple MQTT operations).
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  746)     """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  747) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  748)     def __init__(self):
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  749)         super(OpTimeoutStage, self).__init__()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  750)         # use a fixed list and fixed intervals for now.  Later, this info will come in
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  751)         # as an init param or a retry poicy
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  752)         self.timeout_intervals = {
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  753)             pipeline_ops_mqtt.MQTTSubscribeOperation: 10,
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  754)             pipeline_ops_mqtt.MQTTUnsubscribeOperation: 10,
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  755)         }
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  756) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  757)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  758)     def _run_op(self, op):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  759)         if type(op) in self.timeout_intervals:
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  760)             # Create a timer to watch for operation timeout on this op and attach it
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  761)             # to the op.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  762)             self_weakref = weakref.ref(self)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  763) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  764)             @pipeline_thread.invoke_on_pipeline_thread_nowait
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  765)             def on_timeout():
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  766)                 this = self_weakref()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  767)                 logger.info("{}({}): returning timeout error".format(this.name, op.name))
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  768)                 op.complete(
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  769)                     error=pipeline_exceptions.PipelineTimeoutError(
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  770)                         "operation timed out before protocol client could respond"
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  771)                     )
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  772)                 )
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  773) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  774)             logger.debug("{}({}): Creating timer".format(self.name, op.name))
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  775)             op.timeout_timer = threading.Timer(self.timeout_intervals[type(op)], on_timeout)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  776)             op.timeout_timer.start()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  777) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  778)             # Send the op down, but intercept the return of the op so we can
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  779)             # remove the timer when the op is done
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  780)             op.add_callback(self._clear_timer)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  781)             logger.debug("{}({}): Sending down".format(self.name, op.name))
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  782)             self.send_op_down(op)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  783)         else:
fefdbf11f azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-10-23 12:42:01 -0700  784)             self.send_op_down(op)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  785) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  786)     @pipeline_thread.runs_on_pipeline_thread
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  787)     def _clear_timer(self, op, error):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  788)         # When an op comes back, delete the timer and pass it right up.
a4cb84b75 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-24 11:11:33 -0700  789)         if op.timeout_timer:
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  790)             logger.debug("{}({}): Cancelling timer".format(self.name, op.name))
a4cb84b75 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-24 11:11:33 -0700  791)             op.timeout_timer.cancel()
a4cb84b75 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-24 11:11:33 -0700  792)             op.timeout_timer = None
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  793) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  794) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  795) class RetryStage(PipelineStage):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  796)     """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  797)     The purpose of the retry stage is to watch specific operations for specific
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  798)     errors and retry the operations as appropriate.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  799) 
df9e8d3c0 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-31 16:07:25 -0700  800)     Unlike the OpTimeoutStage, this stage will never need to worry about cancelling
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  801)     failed operations.  When an operation is retried at this stage, it is already
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  802)     considered "failed", so no cancellation needs to be done.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  803)     """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  804) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  805)     def __init__(self):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  806)         super(RetryStage, self).__init__()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  807)         # Retry intervals are hardcoded for now. Later, they come in as an
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  808)         # init param, probably via retry policy.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  809)         self.retry_intervals = {
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  810)             pipeline_ops_mqtt.MQTTSubscribeOperation: 20,
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  811)             pipeline_ops_mqtt.MQTTUnsubscribeOperation: 20,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  812)             pipeline_ops_mqtt.MQTTPublishOperation: 20,
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  813)         }
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  814)         self.ops_waiting_to_retry = []
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  815) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  816)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  817)     def _run_op(self, op):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  818)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  819)         Send all ops down and intercept their return to "watch for retry"
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  820)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  821)         if self._should_watch_for_retry(op):
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  822)             op.add_callback(self._do_retry_if_necessary)
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  823)             self.send_op_down(op)
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  824)         else:
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  825)             self.send_op_down(op)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  826) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  827)     @pipeline_thread.runs_on_pipeline_thread
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  828)     def _should_watch_for_retry(self, op):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  829)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  830)         Return True if this op needs to be watched for retry.  This can be
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  831)         called before the op runs.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  832)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  833)         return type(op) in self.retry_intervals
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  834) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  835)     @pipeline_thread.runs_on_pipeline_thread
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  836)     def _should_retry(self, op, error):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  837)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  838)         Return True if this op needs to be retried.  This must be called after
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  839)         the op completes.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  840)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  841)         if error:
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  842)             if self._should_watch_for_retry(op):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  843)                 if isinstance(error, pipeline_exceptions.PipelineTimeoutError):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  844)                     return True
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  845)         return False
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  846) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  847)     @pipeline_thread.runs_on_pipeline_thread
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  848)     def _do_retry_if_necessary(self, op, error):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  849)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  850)         Handler which gets called when operations are complete.  This function
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  851)         is where we check to see if a retry is necessary and set a "retry timer"
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  852)         which can be used to send the op down again.
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  853)         """
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  854)         if self._should_retry(op, error):
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  855)             self_weakref = weakref.ref(self)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  856) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  857)             @pipeline_thread.invoke_on_pipeline_thread_nowait
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  858)             def do_retry():
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  859)                 this = self_weakref()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  860)                 logger.info("{}({}): retrying".format(this.name, op.name))
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  861)                 op.retry_timer.cancel()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  862)                 op.retry_timer = None
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  863)                 this.ops_waiting_to_retry.remove(op)
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  864)                 # Don't just send it down directly.  Instead, go through run_op so we get
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  865)                 # retry functionality this time too
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  866)                 this.run_op(op)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  867) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  868)             interval = self.retry_intervals[type(op)]
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  869)             logger.warning(
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  870)                 "{}({}): Op needs retry with interval {} because of {}.  Setting timer.".format(
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  871)                     self.name, op.name, interval, error
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  872)                 )
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  873)             )
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  874) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  875)             # if we don't keep track of this op, it might get collected.
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  876)             op.halt_completion()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  877)             self.ops_waiting_to_retry.append(op)
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  878)             op.retry_timer = threading.Timer(self.retry_intervals[type(op)], do_retry)
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  879)             op.retry_timer.start()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  880) 
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  881)         else:
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  882)             if op.retry_timer:
15ecac13a azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-11-18 14:27:55 -0800  883)                 op.retry_timer.cancel()
7a6bb3df9 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-10-22 13:13:07 -0700  884)                 op.retry_timer = None
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  885) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  886) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  887) transient_connect_errors = [
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  888)     pipeline_exceptions.OperationCancelled,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  889)     pipeline_exceptions.PipelineTimeoutError,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  890)     pipeline_exceptions.OperationError,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  891)     transport_exceptions.ConnectionFailedError,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  892)     transport_exceptions.ConnectionDroppedError,
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  893) ]
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  894) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  895) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  896) class ReconnectState(object):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  897)     """
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  898)     Class which holds reconenct states as class variables.  Created to make code that reads like an enum without using an enum.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  899) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  900)     WAITING_TO_RECONNECT: This stage is in a waiting period before reconnecting.  This state implies
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  901)     that the user wants the pipeline to be connected.  ie. After a successful connection, the
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  902)     state will change to LOGICALLY_CONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  903) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  904)     LOGICALLY_CONNECTED: The client wants the pipeline to be connected.  This state is independent
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  905)     of the actual connection state since the pipeline could be logically connected but
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  906)     physically disconnected (this is a temporary condition though.  If we're logically connected
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  907)     and physically disconnected, then we should be waiting to reconnect.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  908) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  909)     LOGICALLY_DISCONNECTED: The client does not want the pipeline to be connected or the pipeline had
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  910)     a permanent errors error and was forced to disconnect.  If the state is LOGICALLY_DISCONNECTED, then the pipeline
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  911)     should be physically disconnected since there is no reason to leave the pipeline connected in this state.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  912)     """
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  913) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  914)     WAITING_TO_RECONNECT = "WAITING_TO_RECONNECT"
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  915)     LOGICALLY_CONNECTED = "LOGICALLY_CONNECTED"
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  916)     LOGICALLY_DISCONNECTED = "LOGICALLY_DISCONNECTED"
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  917) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  918) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  919) class ReconnectStage(PipelineStage):
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  920)     def __init__(self):
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  921)         super(ReconnectStage, self).__init__()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  922)         self.reconnect_timer = None
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  923)         self.state = ReconnectState.LOGICALLY_DISCONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  924)         # never_connected is important because some errors are handled differently the frist time
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  925)         # that we're connecting versus later connections.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  926)         #
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  927)         # For example, if we get a "host not found" the first time we connect, it might mean:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  928)         # 1. The connection string is wrong, in which case we don't want to retry
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  929)         # or it might mean:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  930)         # 2. The connection string is correct and the host is just not available (network glitch?)
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  931)         #
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  932)         # If never_connected=True, we don't know if it's a permanent error (#1) or if it's
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  933)         # temporary (#2), so we take the conservative approach and assume it's a permanent error.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  934)         #
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  935)         # If never_connected=False, we know that we've connected before, so the credentials were
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  936)         # valid at some point in the recent past.  We still don't know with certainty if it's
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  937)         # a temporary error or if it's permanent (the hub may have been deallocated), but it has
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  938)         # worked in the past, so we assume it's a temporary error.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  939)         self.never_connected = True
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  940)         # connect delay is hardcoded for now.  Later, this comes from a retry policy
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  941)         self.reconnect_delay = 10
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  942)         self.waiting_connect_ops = []
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  943) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  944)     @pipeline_thread.runs_on_pipeline_thread
d36fee21b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Carter Tinney  2019-12-06 16:37:56 -0800  945)     def _run_op(self, op):
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  946)         if isinstance(op, pipeline_ops_base.ConnectOperation):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  947)             if self.state == ReconnectState.WAITING_TO_RECONNECT:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  948)                 logger.info(
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  949)                     "{}({}): State is {}.  Adding to wait list".format(
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  950)                         self.name, op.name, self.state
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  951)                     )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  952)                 )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  953)                 self.waiting_connect_ops.append(op)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  954)             else:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  955)                 logger.info(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  956)                     "{}({}): State changes {}->LOGICALLY_CONNECTED.  Adding to wait list and sending new connect op down".format(
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  957)                         self.name, op.name, self.state
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  958)                     )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  959)                 )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  960)                 self.state = ReconnectState.LOGICALLY_CONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  961)                 # We don't send this op down.  Instead, we send a new connect op down.  This way,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  962)                 # we can distinguish between connect ops that we're handling (they go into the
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  963)                 # queue) and connect ops that we are sending down.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  964)                 #
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  965)                 # Once we finally connect, we only have to complete the ops in the queue and we
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  966)                 # never have to worry about completing the op that we sent down.  The code is much
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  967)                 # cleaner this way, especially when you take retries into account, trust me.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  968)                 self.waiting_connect_ops.append(op)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  969)                 self._send_new_connect_op_down()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  970) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  971)         elif isinstance(op, pipeline_ops_base.DisconnectOperation):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  972)             if self.state == ReconnectState.WAITING_TO_RECONNECT:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  973)                 logger.info(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  974)                     "{}({}): State changes {}->LOGICALLY_DISCONNECTED.  Canceling waiting ops and sending disconnect down.".format(
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  975)                         self.name, op.name, self.state
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  976)                     )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  977)                 )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  978)                 self.state = ReconnectState.LOGICALLY_DISCONNECTED
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  979)                 self._clear_reconnect_timer()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  980)                 self._complete_waiting_connect_ops(
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  981)                     pipeline_exceptions.OperationCancelled("Explicit disconnect invoked")
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  982)                 )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  983)                 op.complete()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  984) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  985)             else:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  986)                 logger.info(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  987)                     "{}({}): State changes {}->LOGICALLY_DISCONNECTED.  Sending op down.".format(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  988)                         self.name, op.name, self.state
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  989)                     )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  990)                 )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700  991)                 self.state = ReconnectState.LOGICALLY_DISCONNECTED
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  992)                 self.send_op_down(op)
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  993) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  994)         else:
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  995)             self.send_op_down(op)
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  996) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800  997)     @pipeline_thread.runs_on_pipeline_thread
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  998)     def _handle_pipeline_event(self, event):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800  999)         if isinstance(event, pipeline_events_base.DisconnectedEvent):
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1000)             logger.debug(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1001)                 "{}({}): State is {} Connected is {}.".format(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1002)                     self.name, event.name, self.state, self.pipeline_root.connected
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1003)                 )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1004)             )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1005) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1006)             if self.pipeline_root.connected and self.state == ReconnectState.LOGICALLY_CONNECTED:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1007)                 # When we get disconnected, we try to reconnect as soon as we can.  We don't want
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1008)                 # to reconnect right here bcause we're in a callback in the middle of being
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1009)                 # disconnected and we want things to "settle down" a bit before reconnecting.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1010)                 #
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1011)                 # We also use a timer to reconnect here because the "reconnect timer expired"
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1012)                 # code path is well tested.  If we tried to immediately reconnect here, there
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1013)                 # would be an entire set of scenarios that would need to be tested for
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1014)                 # this case, and these tests would be idential to the "reconnect timer expired"
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1015)                 # tests. Likewise, if there were 2 reconnect code paths (one immediate and one
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1016)                 # delayed), then both those paths would need to be maintained as separate
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1017)                 # flows
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1018)                 self.state = ReconnectState.WAITING_TO_RECONNECT
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1019)                 self._start_reconnect_timer(0.01)
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1020) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1021)             else:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1022)                 # If user manually disconnected, ReconnectState will be LOGICALLY_DISCONNECTED, and
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1023)                 # no reconnect timer will be created.
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1024)                 pass
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1025) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1026)             self.send_event_up(event)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1027) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1028)         else:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1029)             self.send_event_up(event)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1030) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1031)     @pipeline_thread.runs_on_pipeline_thread
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1032)     def _send_new_connect_op_down(self):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1033)         self_weakref = weakref.ref(self)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1034) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1035)         @pipeline_thread.runs_on_pipeline_thread
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1036)         def on_connect_complete(op, error):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1037)             this = self_weakref()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1038)             if this:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1039)                 logger.debug(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1040)                     "{}({}): on_connect_complete error={} state={} never_connected={} connected={} ".format(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1041)                         this.name,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1042)                         op.name,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1043)                         error,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1044)                         this.state,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1045)                         this.never_connected,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1046)                         this.pipeline_root.connected,
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1047)                     )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1048)                 )
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1049)                 if error:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1050)                     if this.never_connected:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1051)                         # any error on a first connection is assumed to e permanent error
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1052)                         this.state = ReconnectState.LOGICALLY_DISCONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1053)                         this._clear_reconnect_timer()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1054)                         this._complete_waiting_connect_ops(error)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1055)                     elif type(error) in transient_connect_errors:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1056)                         # transient errors cause a reconnect attempt
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1057)                         self.state = ReconnectState.WAITING_TO_RECONNECT
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1058)                         self._start_reconnect_timer(self.reconnect_delay)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1059)                     else:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1060)                         # all others are permanent errors
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1061)                         this.state = ReconnectState.LOGICALLY_DISCONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1062)                         this._clear_reconnect_timer()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1063)                         this._complete_waiting_connect_ops(error)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1064)                 else:
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1065)                     # successfully connected
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1066)                     this.never_connected = False
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1067)                     this.state = ReconnectState.LOGICALLY_CONNECTED
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1068)                     this._clear_reconnect_timer()
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1069)                     this._complete_waiting_connect_ops()
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1070) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1071)         logger.debug("{}: sending new connect op down".format(self.name))
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1072)         op = pipeline_ops_base.ConnectOperation(callback=on_connect_complete)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1073)         self.send_op_down(op)
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1074) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1075)     @pipeline_thread.runs_on_pipeline_thread
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1076)     def _start_reconnect_timer(self, delay):
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1077)         """
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1078)         Set a timer to reconnect after some period of time
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1079)         """
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1080)         logger.debug(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1081)             "{}: State is {}. Connected={} Starting reconnect timer".format(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1082)                 self.name, self.state, self.pipeline_root.connected
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1083)             )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1084)         )
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1085) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1086)         self._clear_reconnect_timer()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1087) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1088)         self_weakref = weakref.ref(self)
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1089) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1090)         @pipeline_thread.invoke_on_pipeline_thread_nowait
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1091)         def on_reconnect_timer_expired():
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1092)             this = self_weakref()
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1093)             logger.debug(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1094)                 "{}: Reconnect timer expired. State is {} Connected is {}.".format(
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1095)                     self.name, self.state, self.pipeline_root.connected
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1096)                 )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1097)             )
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1098) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1099)             this.reconnect_timer = None
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1100)             if (
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1101)                 this.state == ReconnectState.WAITING_TO_RECONNECT
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1102)                 and not self.pipeline_root.connected
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1103)             ):
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1104)                 # if we're waiting to reconnect and not connected, we try again
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1105)                 this.state = ReconnectState.LOGICALLY_CONNECTED
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1106)                 this._send_new_connect_op_down()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1107) 
acb6a4687 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-06-16 07:10:11 -0700 1108)         self.reconnect_timer = threading.Timer(delay, on_reconnect_timer_expired)
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1109)         self.reconnect_timer.start()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1110) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1111)     @pipeline_thread.runs_on_pipeline_thread
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1112)     def _clear_reconnect_timer(self):
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1113)         """
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1114)         Clear any previous reconnect timer
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1115)         """
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1116)         if self.reconnect_timer:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1117)             logger.info("{}: clearing reconnect timer".format(self.name))
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1118)             self.reconnect_timer.cancel()
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1119)             self.reconnect_timer = None
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1120) 
e4d576211 azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2019-11-08 17:15:14 -0800 1121)     @pipeline_thread.runs_on_pipeline_thread
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1122)     def _complete_waiting_connect_ops(self, error=None):
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1123)         """
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1124)         A note of explanation: when we are waiting to reconnect, we need to keep a list of
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1125)         all connect ops that come through here.  We do this for 2 reasons:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1126) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1127)         1. We don't want to pass them down immediately because we want to honor the waiting
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1128)            period.  If we passed them down immediately, we'd try to reconnect immediately
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1129)            instead of waiting until reconnect_timer fires.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1130) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1131)         2. When we're retrying, there are new ConnectOperation ops sent down regularly.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1132)            Any of the ops could be the one that succeeds.  When that happens, we need a
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1133)            way to to complete all of the ops that are patiently waiting for the connection.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1134) 
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1135)         Right now, we only need to do this with ConnectOperation ops because these are the
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1136)         only ops that need to wait because these are the only ops that cause a connection
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1137)         to be established.  Other ops pass through this stage, and might fail in later
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1138)         stages, but that's OK.  If they needed a connection, the AutoConnectStage before
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1139)         this stage should be taking care of that.
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1140)         """
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1141)         logger.info("{}: completing waiting ops with error={}".format(self.name, error))
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1142)         list_copy = self.waiting_connect_ops
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1143)         self.waiting_connect_ops = []
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1144)         for op in list_copy:
12d67267b azure-iot-device/azure/iot/device/common/pipeline/pipeline_stages_base.py       (Bert Kleewein  2020-02-27 14:40:00 -0800 1145)             op.complete(error)
